/* ==========================================================================
   Choreographic Grid helpers
   ========================================================================== */

/*
	 Grid Setup Defaults
	 * Choose your grid options.
	 ** THESE WILL BE OVERRIDDEN BY THE SETTINGS IN _variables.scss **
	 ========================================================================== */

/* Setup grid defaults */
$gridColumnCount      : 12     !default; // Total column count
$gridGutterWidth      : 30     !default; // [in pixels]
$gridMaxWidth         : 1000   !default; // [in pixels]
$gridMinWidth         : 1000   !default; // [in pixels] Minimum width for grid in <IE9
$gridMargin           : 0      !default; // [in pixels] Space outside the grid

/* Column Padding */
$gridColumnPadding    : 0      !default; // [in pixels]
$gridColumnPaddingUnit: '%'    !default; // [px or %] Specify your unit of measurement for column padding
$nestedColumnPadding  : false  !default; // Remove padding on nested columns so they are aligned correctly. Set this to [false] to enable it.

$usingPushPullColumns : true   !default; // Allow columns to be pushed & pulled
$usingOffsetcolumns   : true   !default; // Allow columns to be offset
$usingSplitsAndShunts : true   !default; // Use Splits & Shunts for responsive web design


/*
   Grid column mixin
   ========================================================================== */
@mixin gridColumn() {
    @if $gridGutterWidth > 0 {
        margin-left: gutterCalc();
    }
    @if $gridColumnPadding > 0 {
        padding: paddingCalc();
    }
    display: inline-block;
    min-height: 1px;
    position: relative;
    clear: none;
    @include box-sizing(border-box);
    vertical-align: top;
    &:first-child {
        margin-left: 0;
    }   
}


/*
   Grid columns width calcs
   ========================================================================== */
@function gridColumnWidthCalc($columnSpan: 1, $showUnit: true) {
	$numberOfBlocksInContainer: $gridColumnCount / $columnSpan;
	$totalWidthOfAllGutters:    gutterCalc(false) * ($numberOfBlocksInContainer - 1);
	$totalWidthOfAllBlocks:     1 - $totalWidthOfAllGutters;
	$widthOfASingleBlock:       $totalWidthOfAllBlocks / $numberOfBlocksInContainer;

	@if $showUnit == true {
		@return percentage( $widthOfASingleBlock );
	} @else {
		@return $widthOfASingleBlock;
	}
}

/*
   Column width mixin
   ========================================================================== */
@mixin column($columnSpan: 1) {
	width: gridColumnWidthCalc($columnSpan, true);
}


/*
   Gutter calcs
   * Default: percent
   * Usage: gutterCalc() or gutterCalc(false)
   ========================================================================== */
@function gutterCalc($showUnit: true) {
	@if $showUnit == true {
		@return percentage( $gridGutterWidth / ( $gridMaxWidth - ($gridMargin * 2) ) );
	} @else {
		@return $gridGutterWidth / ( $gridMaxWidth - ($gridMargin * 2) );
	}
}


/*
   Column padding (gutter)
   * Default: percent (can be pixels though)
   * Usage: paddingCalc() or paddingCalc(px)
   ========================================================================== */
@function paddingCalc() {
	@if $gridColumnPaddingUnit == '%' {
		@return percentage( $gridColumnPadding / $gridMaxWidth );
	} @else if $gridColumnPaddingUnit == 'px' {
		@return $gridColumnPadding + px;
	}
}



/*
   Shunts, offset columns, column source order calculations
   ========================================================================== */
@mixin shunt($shuntSpan: 1) {
	margin-right: (gridColumnWidthCalc($shuntSpan, false) * $shuntSpan) + ($gridGutterWidth * ($shuntSpan - 1));
}
@mixin offset($columnOffset: 1) {
	margin-left: gutterCalc() + gridColumnWidthCalc($columnOffset, true) + gutterCalc();
}
@mixin offsetFirstChild($columnOffset: 1) {
	margin-left: gridColumnWidthCalc($columnOffset, true) + gutterCalc();
}
@mixin push($pushOffset: 1) {
	left: gridColumnWidthCalc($pushOffset, true) + gutterCalc();
	position: relative;
}
@mixin pull($pullOffset: 1) {
	right: gridColumnWidthCalc($pullOffset, true) + gutterCalc();
	position: relative;
}
