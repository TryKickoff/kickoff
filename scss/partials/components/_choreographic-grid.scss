/* ==========================================================================
	 The Choreographic Grid
	 * Grid setup
	 * Grid helpers/mixins
	 * Default grid styles
	 * Media queries
	 * Centred columns
	 ========================================================================== */


/*
	 Basic Usage:
	 <div class="g-row">
			 <div class="g-col g-span4"></div>
			 <div class="g-col g-span8"></div>
	 </div>
	 ========================================================================== */


/*
	 Grid Setup
	 * Choose your grid options.
	 * These will be overridden by the settings in _variables.scss
	 ========================================================================== */

/* Setup grid defaults */
$gridColumnCount      : 12     !default; // Total column count
$gridGutterWidth      : 30     !default; // [in pixels]
$gridMaxWidth         : 1000   !default; // [in pixels]
$gridMinWidth         : 1000   !default; // [in pixels] Minimum width for grid in <IE9
$gridMargin           : 0      !default; // [in pixels] Space outside the grid

/* Column Padding */
$gridColumnPadding    : 0      !default; // [in pixels]
$gridColumnPaddingUnit: '%'    !default; // [px or %] Specify your unit of measurement for column padding
$nestedColumnPadding  : false  !default; // Remove padding on nested columns so they are aligned correctly. Set this to [false] to enable it.

$usingPushPullColumns : true   !default; // Allow columns to be pushed & pulled
$usingOffsetcolumns   : true   !default; // Allow columns to be offset
$usingSplitsAndShunts : true   !default; // Use Splits & Shunts for responsive web design

/*
	 Import Grid helpers and mixins
	 ========================================================================== */
@import "../../helpers/choreographic-grid-helpers";



/* ==========================================================================
	 Default grid styles
	 ========================================================================== */
.g-container {
	padding-left: $gridMargin + px;
	padding-right: $gridMargin + px;
	width: 95%;
	max-width: $gridMaxWidth + px;
	margin: 0 auto;

	.lt-ie9 & {
		min-width: $gridMinWidth + px;
	}
}

.g-row {
	width: 100%;
	margin: 0 auto;

	// Clearfix this mother!
	zoom: 1;
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}

	// Nested rows
	& .g-row {
		min-width: 0;

		@if $nestedColumnPadding == false {
			.g-col {
				padding: 0;
			}
		}
	}
}



/* ==========================================================================
	 Media queries
	 ========================================================================== */

// === $breakpoint-single-col> ===
@include respond-min($breakpoint-single-col) {
	// NAME THIS MEDIA QUERY
	$mediaQueryName : 'mq-alpha';

	// COLUMNS ONLY START AT THIS VIEWPORT WIDTH
	.g-col {
		@include gridColumn;
	}

	// CREATE THE RELEVANT CLASSES
	@for $i from 1 to $gridColumnCount + 1 {
		@if $mediaQueryName {
			.g-span#{$i}, .g-#{$mediaQueryName}-resize-to#{$i} { @include column($i); }
		} @else {
			.g-span#{$i} { @include column($i); }
		}
	}

	// ==============================================
	// === OFFSET & SOURCE ORDERING (PUSH & PULL) ===
	// ==============================================
	@if $usingOffsetcolumns == true {
		@for $i from 1 to $gridColumnCount {
			.g-row > .g-offset1 {
				@include offset($i);
				&:first-child {
					@include offsetFirstChild($i);
				}
			}
		}
	}
	@if $usingPushPullColumns == true {
		@for $i from 2 to $gridColumnCount {
			.g-row > .g-push#{$i}	{ @include push($i); }
		}
		@for $i from 2 to $gridColumnCount {
			.g-row > .g-pull#{$i}	{ @include pull($i); }
		}
	}

	// ====================================
	// === SPLITTING COLUMNS & SHUNTING ===
	// ====================================
	.g-split .g-col, .g-shunt {
		float:none;
		margin-left: 0;
		min-height: 1px;
		position: relative;
		width: 100%;
		clear: both;
	}
}
// === end $breakpoint-single-col> ===



// === $breakpoint-wide> ===
@include respond-min($breakpoint-wide) {
	// NAME THIS MEDIA QUERY
	$mediaQueryName : 'mq-beta';

	// ====================
	// === CHOREOGRAPHY ===
	// ====================
	@if $usingSplitsAndShunts == true {
		.g-split .g-col, .g-shunt {
			@include gridColumn;
		}


		// === INFO ===
		// I need to restate the grid widths & offsets in this media-query because of the cascade. For example, if I add .#{$mediaQueryName}-resize-to8 to a column in #{$mediaQueryName} & I need the the same column to return to it's 'natural' width (.span6 for example) in the wider media-query, there is no other way, that I can see, to do that. One thought I had was to add a body class, using javascript, stating which media-query is currently being viewed, then I can just use that to apply the relevant class. Not sure about this though.

		@for $i from 1 to $gridColumnCount {
			@if $mediaQueryName {
				.g-span#{$i}, .g-#{$mediaQueryName}-resize-to#{$i}, .g-split .g-span#{$i} { @include column($i); }
			} @else {
				.g-span#{$i}, .g-split .g-span#{$i} { @include column($i); }
			}
		}
	}

	// Offset Columns
	@if $usingOffsetcolumns == true {
		@for $i from 1 to $gridColumnCount {
			.g-row > .g-offset1 {
				@include offset($i);
				&:first-child {
					@include offsetFirstChild($i);
				}
			}
		}
	}

	// Push & Pull Columns
	@if $usingPushPullColumns == true {
		@for $i from 2 to $gridColumnCount - 2 {
			.g-row > .g-#{$mediaQueryName}-push#{$i}, .g-push#{$i}	{ @include push($i); }
		}
		@for $i from 2 to $gridColumnCount - 2 {
			.g-row > .g-#{$mediaQueryName}-pull#{$i}, .g-pull#{$i}	{ @include pull($i); }
		}
	}

	.g-#{$mediaQueryName}-end { float: right; }
	.g-#{$mediaQueryName}-end { float: left; }


}
// === end $breakpoint-wide> ===



/*
	 Centred columns
	 ========================================================================== */
.g-centered.g-col, .g-centred.g-col { float: none; margin: 0 auto; }
